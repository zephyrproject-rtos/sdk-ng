
target_sdk_dir=""
post_install_cleanup=1
confirm=0
rc_confirm=""
cmake_confirm=""

usage () {
  cat << EOF
  Usage : $TOOLCHAIN_NAME < -- options >


Options:
  -h
        Display this help and exit.

  -d <dir>
        Specify the absolute path of the SDK installation directory.

  -y
        Automatic yes to prompts; assume "yes" as answer to all prompts.

  -[no]rc
        Whether to create/update the ~/.zerphyrc file (prompt if not given)

  -[no]cmake
        Whether to install Zephyr-sdk CMake module (prompt if not given)

EOF
}

verify_os () {
case "$(uname -s)" in

   Darwin)
     MD5=md5
     os=macos
     ;;

   Linux)
     MD5=md5sum
     os=linux
     #echo 'Linux'
     ;;

   # Other OS ...
   # see https://en.wikipedia.org/wiki/Uname#Examples
   # Don't allow to install on any of them, this includes cygwin, Windows,
   # Solaris etc.

   *)
     echo 'Unsupported OS'
     exit 1
     ;;
esac
}

while [ "$1" != "" ]; do
	case $1 in
	    -h )
			usage
			exit 0
			;;
		-d )
			shift
			target_sdk_dir=$1
			;;
		-nocleanup )
			post_install_cleanup=0;
			;;
		-y )
			confirm="y";
			if [ -z "$rc_confirm" ]; then
			  rc_confirm="y"
			fi
			if [ -z "$cmake_confirm" ]; then
			  cmake_confirm="y"
			fi
			;;
		-rc )
			rc_confirm="y";
			;;
		-norc )
			rc_confirm="n";
			;;
		-cmake )
			cmake_confirm="y"
			;;
		-nocmake )
			cmake_confirm="n"
			;;
		* )
			echo "Error: Invalid argument \"$1\""
			usage
			exit 1
			;;
	esac
	shift
done

spinner()
{
	local pid=$1
	local delay=0.175
	local spinstr='|/-\'
	local infotext=$2
	while kill -0 $pid 2>/dev/null ; do
		local temp=${spinstr#?}
		printf " [%c] %s" "$spinstr" "$infotext"
		local spinstr=$temp${spinstr%"$temp"}
		sleep $delay
		printf "\b\b\b\b\b\b"
		for i in $(seq 1 ${#infotext}); do
			printf "\b"
		done
	done
	printf " [*] %s" "$infotext"
	printf " \b\b\b\b"
}

do_cleanup()
{
	cd $target_sdk_dir
	if [ $post_install_cleanup = "1" ]; then
		#rm site-config*
		env_files=(environment-setup*)
		if [ -e "${env_files[0]}" ]; then
			rm environment-setup*
		fi
	fi
	install -d -m 0755 $VERSION_DIR
	ver_files=(version-*)
	if [ -e "${ver_files[0]}" ]; then
		mv version-* $VERSION_DIR
	fi
	echo "$SDK_VERSION" > sdk_version
	chmod 0644 sdk_version
}

do_zephyrrc()
{
	if [ ! $create_zephyrrc ]; then
		return
	fi

	echo
	echo "You need to setup the following environment variables to use the toolchain:"
	echo
	echo "     export ZEPHYR_TOOLCHAIN_VARIANT=zephyr"
	echo "     export ZEPHYR_SDK_INSTALL_DIR=$target_sdk_dir"
	echo
	if [ -z "$rc_confirm" ]; then
		prompt "create/update $HOME/.zephyrrc with environment variables setup for you "
		rc_confirm=$answer
	fi
	if [ "$rc_confirm" = "y" ]; then
		if [ -f $HOME/.zephyrrc ]; then
			sed -i "s#ZEPHYR_SDK_INSTALL_DIR=.*#ZEPHYR_SDK_INSTALL_DIR=${target_sdk_dir}#" $HOME/.zephyrrc
			sed -i "s#ZEPHYR_TOOLCHAIN_VARIANT=.*#ZEPHYR_TOOLCHAIN_VARIANT=zephyr#" $HOME/.zephyrrc
		else
			echo "export ZEPHYR_TOOLCHAIN_VARIANT=zephyr" >> ~/.zephyrrc
			echo "export ZEPHYR_SDK_INSTALL_DIR=$target_sdk_dir" >> ~/.zephyrrc
		fi
	fi
}

do_cmake_package()
{
	ZEPHYR_SDK_REGISTRY_DIR=$HOME/.cmake/packages/Zephyr-sdk

	type $MD5
	if [ $? -eq 0 ]; then
		reg_file=$ZEPHYR_SDK_REGISTRY_DIR/`echo -n $target_sdk_dir | $MD5 | cut -d' ' -f1`

		if [ -e $reg_file ]; then
			# The install dir is already in CMake package registry so simply return.
			return
		fi

		if [ -z "$cmake_confirm" ]; then
			prompt "register Zephyr-sdk CMake module with path $target_sdk_dir "
			cmake_confirm=$answer
		fi
		if [ "$cmake_confirm" = "y" ]; then
			if [ ! -d $ZEPHYR_SDK_REGISTRY_DIR ]; then
				mkdir -p $ZEPHYR_SDK_REGISTRY_DIR
			fi
			echo "$target_sdk_dir" > $reg_file
			echo "$target_sdk_dir registered in $reg_file"
		fi
	fi
}

# Read the input "y"
# $1 is optional, but allows the caller to provide additional text.
prompt () {
	echo "Do you want to $1(y/n)? "
	while read answer; do
		if [ "$answer" = "Y" -o "$answer" = "y" ]; then
			answer="y"
			break
		elif [ "$answer" = "N" -o "$answer" = "n" ]; then
			answer="n"
			break
		else
			echo "Invalid input \"$answer\", please input 'y' or 'n': "
		fi
	done
}
# Like prompt, but only if prompts were not pre-answered by -y argument
query () {
	if [ "$confirm" != "y" ]; then
		prompt "$1"
	else
		answer="y"
		echo
	fi
}

verify_os

which python3 2>&1 > /dev/null
if [ $? -ne 0 ]; then
	echo "ERROR: required python3 binary not in PATH" 1>&2
	exit 1
fi

which xz 2>&1 > /dev/null
if [ $? -ne 0 ]; then
	echo "ERROR: required xz binary not in PATH" 1>&2
	exit 1
fi

if [ "$target_sdk_dir" = "" ]; then
	read -e -p "Enter target directory for SDK (default: $DEFAULT_INSTALL_DIR): " target_sdk_dir
	[ "$target_sdk_dir" = "" ] && target_sdk_dir=$DEFAULT_INSTALL_DIR
fi

eval target_sdk_dir=$target_sdk_dir

if [[ $target_sdk_dir != /* ]]; then
	echo "The target directory path ($target_sdk_dir) must be an absolute path. Abort!"
	exit 1;
fi

eval target_sdk_dir=$(echo "$target_sdk_dir"|sed 's/ /\\ /g')
if [ -d "$target_sdk_dir" ]; then
	target_sdk_dir=$(cd "$target_sdk_dir"; pwd)
elif [ $os = "linux" ]; then
	target_sdk_dir=$(readlink -m "$target_sdk_dir")
fi

if [ -n "$(echo $target_sdk_dir|grep ' ')" ]; then
	echo "The target directory path ($target_sdk_dir) contains spaces. Abort!"
	exit 1
fi

# Verify that the install folder is among the default search paths for CMake.
# If not, prompt the user before continue, and create ~/.zephyrrc
eval sdk_dirname=$(dirname "$target_sdk_dir")
eval sdk_basename=$(basename "$target_sdk_dir")
if [    "$sdk_dirname" != "/opt" \
	-a "$sdk_dirname" != "/usr" \
	-a "$sdk_dirname" != "/usr/local" \
	-a "$sdk_dirname" != "$HOME" \
	-a "$sdk_dirname" != "$HOME/.local" \
	-a "$sdk_dirname" != "$HOME/.local/opt" \
	-a "$sdk_dirname" != "$HOME/bin" ] ||\
	[[ "${sdk_basename}" != "zephyr-sdk"* ]]; then
	echo
	echo "It is recommended to install Zephyr SDK at one of the following locations for automatic discoverability in CMake:"

	if [ ${sdk_dirname:0:4} == "/usr" ]; then
		echo "  /usr/zephyr-sdk-$SDK_VERSION"
		echo "  /usr/local/zephyr-sdk-$SDK_VERSION"
	elif [ ${sdk_dirname:0:4} == "/opt" ]; then
		echo "  /opt/zephyr-sdk-${SDK_VERSION}"
	elif [ ${sdk_dirname:0:$((${#HOME}+7))} == "$HOME/.local" ]; then
		echo "  ${HOME}/.local/zephyr-sdk-${SDK_VERSION}"
		echo "  ${HOME}/.local/opt/zephyr-sdk-${SDK_VERSION}"
	elif [ ${sdk_dirname:0:${#HOME}} == "$HOME" ]; then
		echo "  ${HOME}/zephyr-sdk-${SDK_VERSION}"
		echo "  ${HOME}/bin/zephyr-sdk-${SDK_VERSION}"
	else
		echo "  ${HOME}/zephyr-sdk-${SDK_VERSION}"
		echo "  /opt/zephyr-sdk-${SDK_VERSION}"
	fi
	echo
	echo Note: The version number \'-$SDK_VERSION\' can be omitted.
	echo

	query "installing to ${target_sdk_dir} "
	if [ "$answer" = "n" ]; then
		# Abort the installation
		echo "SDK installation aborted!"
		exit 1
	fi
	do_cmake_package
	create_zephyrrc=true
fi

echo "Installing SDK to $target_sdk_dir"

if [ -d $target_sdk_dir ]; then
	# If the directory exists, test for write permission
	if [ ! -w $target_sdk_dir ] ; then
		echo "No permission, please run as 'sudo'"
		exit 1
	else
		# wipe the directory first
		if [ -d $target_sdk_dir/sysroots ]; then
			echo "The directory $target_sdk_dir/sysroots will be removed! "
			query
			if [ "$answer" = "y" ]; then
		        	rm -rf $target_sdk_dir/sysroots/
				rm -rf $target_sdk_dir/info-zephyr-sdk*/
				rm -fr $target_sdk_dir/sdk_version
			else
		    		# Abort the installation
		    		echo "SDK installation aborted!"
		    		exit 1
		    	fi
		fi
	fi
else
	echo "Creating directory $target_sdk_dir"
	# Try to create the directory (this will not succeed if user doesn't have rights)
	if install -d -m 0751 $target_sdk_dir >/dev/null 2>&1  ; then
		echo "Success"
	else
		echo "No permission, please run as 'sudo'"
		exit 1
	fi
fi

if (( EUID != 0 )); then
	umask 0002
else
	umask 0022
fi


